syntax = "proto3";

package subscriptions;

option go_package = "./api/grpc";

import "google/protobuf/empty.proto";

service Service {
  // public
  rpc Create(CreateRequest) returns (CreateResponse);
  rpc Read(ReadRequest) returns (ReadResponse);
  rpc UpdateMetadata(UpdateMetadataRequest) returns (google.protobuf.Empty);
  rpc Delete(DeleteRequest) returns (google.protobuf.Empty);
  rpc SearchOwn(SearchOwnRequest) returns (SearchOwnResponse);
  // internal
  rpc SearchByCondition(SearchByConditionRequest) returns (SearchByConditionResponse);
}

// Create

message CreateRequest {
  Metadata md = 1;
  ConditionInput cond = 2;
}

// Metadata represents the mutable part of the Subscription data.
message Metadata {
  string description = 1;
  uint32 priority = 2;
  bool enabled = 3;
}

// ConditionInput represents the Subscription routing Condition data that is immutable once Subscription is created.
message ConditionInput {
  bool not = 1;
  oneof condition {
    GroupConditionInput gc = 2;
    KiwiTreeConditionInput ktc = 3;
  }
}

message GroupConditionInput {
  GroupLogic logic = 1;
  repeated ConditionInput group = 2;
}

enum GroupLogic {
  And = 0;
  Or = 1;
  Xor = 2;
}

// marker type
message KiwiTreeConditionInput {
  string key = 1;
  string pattern = 2;
  bool partial = 3;
}

message CreateResponse {
  string id = 1;
}

// Read

message ReadRequest {
  string id = 1;
}

message ReadResponse {
  Metadata md = 1;
  ConditionOutput cond = 2;
}

message ConditionOutput {
  bool not = 1;
  oneof condition {
    GroupConditionOutput groupCondition = 2;
    KiwiConditionOutput kiwiCondition = 3;
  }
}

message GroupConditionOutput {
  GroupLogic logic = 1;
  repeated ConditionOutput group = 2;
}

message KiwiConditionOutput {
  string id = 1;
  string key = 2;
  string pattern = 3;
  bool partial = 4;
}

// Update

message UpdateMetadataRequest {
  string id = 1;
  Metadata md = 2;
}

// Delete

message DeleteRequest {
  string id = 1;
}

// SearchByAccount

message SearchOwnRequest {
  string cursor = 1;
  uint32 limit = 2;
}

message SearchOwnResponse {
  repeated string ids = 1;
}

// SearchByCondition

message SearchByConditionRequest {
  string cursor = 1;
  uint32 limit = 2;
  oneof condition {
    KiwiConditionQuery kiwiConditionQuery = 3;
  }
}

message KiwiConditionQuery {
  string key = 1;
  string pattern = 2;
  bool partial = 3;
}

message SearchByConditionResponse {
  repeated ConditionMatch page = 1;
}

message ConditionMatch {
  string subscriptionId = 1;
  string account = 2;
  string conditionId = 3;
  ConditionOutput condition = 4;
}
