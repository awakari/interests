syntax = "proto3";

package subscriptions;

option go_package = "./api/grpc";

import "google/protobuf/empty.proto";

service Service {
  rpc Create(SubscriptionInputData) returns (CreateResponse);
  rpc Read(ReadRequest) returns (SubscriptionOutputData);
  rpc Delete(DeleteRequest) returns (google.protobuf.Empty);
  rpc SearchByCondition(SearchByConditionRequest) returns (SearchResponse);
  rpc SearchByMetadata(SearchByMetadataRequest) returns (SearchResponse);
}

message SubscriptionInputData {
  map<string, string> metadata = 1;
  repeated string routes = 2;
  InputCondition condition = 3;
}

message CreateResponse {
  string id = 1;
}

message ReadRequest {
  string id = 1;
}

message SubscriptionOutputData {
  map<string, string> metadata = 1;
  repeated string routes = 2;
  OutputCondition condition = 3;
}

message DeleteRequest {
  string id = 1;
}

message SearchByConditionRequest {
  string cursor = 1;
  uint32 limit = 2;
  oneof condition {
    KiwiConditionQuery kiwiConditionQuery = 3;
  }
}

message SearchResponse {
  repeated Subscription page = 1;
}

message Subscription {
  string id = 1;
  SubscriptionOutputData data = 2;
}

message InputCondition {
  oneof condition {
    GroupInputCondition groupCondition = 1;
    KiwiTreeInputCondition kiwiTreeCondition = 2;
  }
}

message OutputCondition {
  oneof condition {
    GroupOutputCondition groupCondition = 1;
    KiwiOutputCondition kiwiCondition = 2;
  }
}

message OutputConditionBase {
  string id = 1;
  bool not = 2;
}

message GroupInputCondition {
  bool not = 1;
  GroupLogic logic = 2;
  repeated InputCondition group = 3;
}

message GroupOutputCondition {
  OutputConditionBase base = 1;
  GroupLogic logic = 2;
  repeated OutputCondition group = 3;
}

enum GroupLogic {
  And = 0;
  Or = 1;
  Xor = 2;
}

message KiwiConditionQuery {
  string key = 1;
  string pattern = 2;
  bool partial = 3;
}

// marker type
message KiwiTreeInputCondition {
  bool not = 1;
  string key = 2;
  string pattern = 3;
  bool partial = 4;
}

message KiwiOutputCondition {
  OutputConditionBase base = 1;
  string key = 2;
  string pattern = 3;
  bool partial = 4;
}

message SearchByMetadataRequest {
  string cursor = 1;
  uint32 limit = 2;
  map<string, string> metadata = 3;
}
