syntax = "proto3";

package subscriptions;

option go_package = "./api/grpc";

import "google/protobuf/empty.proto";

service Service {
  rpc Create(CreateRequest) returns (google.protobuf.Empty);
  rpc Read(ReadRequest) returns (Subscription);
  rpc Delete(DeleteRequest) returns (google.protobuf.Empty);
  rpc ListNames(ListNamesRequest) returns (ListNamesResponse);
  rpc SearchByKiwi(SearchByKiwiRequest) returns (SearchResponse);
}

message CreateRequest {
  string name = 1;
  string description = 2;
  repeated string routes = 3;
  InputCondition condition = 4;
}

message ReadRequest {
  string name = 1;
}

message DeleteRequest {
  string name = 1;
}

message ListNamesRequest {
  string cursor = 1;
  uint32 limit = 2;
}

message ListNamesResponse {
  repeated string names = 1;
}

message SearchByKiwiRequest {
  string cursor = 1;
  uint32 limit = 2;
  string key = 3;
  string pattern = 4;
  bool partial = 5;
}

message SearchResponse {
  repeated Subscription page = 1;
}

message Subscription {
  string name = 1;
  string description = 2;
  repeated string routes = 3;
  OutputCondition condition = 4;
}

message InputCondition {
  oneof condition {
    GroupInputCondition groupCondition = 1;
    KiwiTreeCondition kiwiTreeCondition = 2;
  }
}

message OutputCondition {
  oneof condition {
    GroupOutputCondition groupCondition = 1;
    KiwiCondition kiwiCondition = 2;
  }
}

message ConditionBase {
  bool not = 1;
}

message GroupConditionBase {
  ConditionBase base = 1;
  GroupLogic logic = 2;
}

message GroupInputCondition {
  GroupConditionBase base = 1;
  repeated InputCondition group = 2;
}

message GroupOutputCondition {
  GroupConditionBase base = 1;
  repeated OutputCondition group = 2;
}

enum GroupLogic {
  Or = 0;
  Xor = 1;
  And = 2;
}

message KeyCondition {
  ConditionBase base = 1;
  string key = 2;
}

message KiwiCondition {
  KeyCondition base = 1;
  string pattern = 2;
  bool partial = 3;
}

// marker only type
message KiwiTreeCondition {
  KiwiCondition base = 1;
}
