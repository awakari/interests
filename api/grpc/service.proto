syntax = "proto3";

package subscriptions;

option go_package = "./api/grpc";

import "google/protobuf/empty.proto";

service Service {
  rpc Create(SubscriptionDataInput) returns (CreateResponse);
  rpc Read(ReadRequest) returns (SubscriptionDataOutput);
  rpc Delete(DeleteRequest) returns (google.protobuf.Empty);
  rpc SearchByCondition(SearchByConditionRequest) returns (SearchByConditionResponse);
  rpc SearchByMetadata(SearchByMetadataRequest) returns (SearchByMetadataResponse);
}

// Create

message SubscriptionDataInput {
  map<string, string> metadata = 1;
  RouteInput route = 2;
}

message RouteInput {
  repeated string destinations = 1;
  ConditionInput condition = 2;
}

message ConditionInput {
  bool not = 1;
  oneof condition {
    GroupConditionInput groupCondition = 2;
    KiwiTreeConditionInput kiwiTreeCondition = 3;
  }
}

message GroupConditionInput {
  GroupLogic logic = 1;
  repeated ConditionInput group = 2;
}

enum GroupLogic {
  And = 0;
  Or = 1;
  Xor = 2;
}

message KiwiTreeConditionInput { // marker type
  string key = 1;
  string pattern = 2;
  bool partial = 3;
}

message CreateResponse {
  string id = 1;
}

// Read

message ReadRequest {
  string id = 1;
}

message SubscriptionDataOutput {
  map<string, string> metadata = 1;
  RouteOutput route = 2;
}

message RouteOutput {
  repeated string destinations = 1;
  ConditionOutput condition = 2;
}

message ConditionOutput {
  bool not = 1;
  oneof condition {
    GroupConditionOutput groupCondition = 2;
    KiwiConditionOutput kiwiCondition = 3;
  }
}

message GroupConditionOutput {
  GroupLogic logic = 1;
  repeated ConditionOutput group = 2;
}

message KiwiConditionOutput {
  string id = 1;
  string key = 2;
  string pattern = 3;
  bool partial = 4;
}

// Delete

message DeleteRequest {
  string id = 1;
}

// SearchByCondition

message SearchByConditionRequest {
  string cursor = 1;
  uint32 limit = 2;
  oneof condition {
    KiwiConditionQuery kiwiConditionQuery = 3;
  }
}

message KiwiConditionQuery {
  string key = 1;
  string pattern = 2;
  bool partial = 3;
}

message SearchByConditionResponse {
  repeated ConditionMatch page = 1;
}

message ConditionMatch {
  string subscriptionId = 1;
  string conditionId = 2;
  RouteOutput route = 3;
}

// SearchByMetadata

message SearchByMetadataRequest {
  string cursor = 1;
  uint32 limit = 2;
  map<string, string> metadata = 3;
}

message SearchByMetadataResponse {
  repeated Subscription page = 1;
}

message Subscription {
  string id = 1;
  SubscriptionDataOutput data = 2;
}
